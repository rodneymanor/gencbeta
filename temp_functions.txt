function handleDownloadError(error: unknown): never {
  if (error instanceof Error && error.name === "AbortError") {
    throw new Error("TikTok download timed out. Please check your connection and try again.");
  }
  
  // Re-throw our custom errors, or wrap unknown errors
  if (error instanceof Error && error.message.includes("TikTok")) {
    throw error;
  }
  
  console.error("‚ùå [DOWNLOAD] TikTok download error:", error);
  throw new Error("Failed to download TikTok video. Please check the URL and try again.");
}

async function extractVideoUrls(metadata: TikTokMetadata): Promise<string[]> {
  const videoData = metadata.data?.aweme_detail?.video;
  const videoUrls = videoData?.play_addr?.url_list;

  if (!videoUrls || videoUrls.length === 0) {
    console.error("‚ùå [DOWNLOAD] No video URLs found in TikTok response");
    throw new Error("Unable to extract video download links. The video may be private or restricted.");
  }

  return videoUrls;
}

export async function downloadTikTokVideo(url: string): Promise<TikTokVideoResult | null> {
  console.log("üéµ [DOWNLOAD] Downloading TikTok video via RapidAPI...");

  const videoId = extractTikTokVideoId(url);
  if (!videoId) {
    console.error("‚ùå [DOWNLOAD] Could not extract TikTok video ID from URL:", url);
    throw new Error("Invalid TikTok URL format. Please check the URL and try again.");
  }

  console.log("üÜî [DOWNLOAD] TikTok video ID:", videoId);

  try {
    const metadata = await getOrFetchMetadata(videoId);
    const videoUrls = await extractVideoUrls(metadata);
    return await processVideoUrls(videoUrls, videoId);
  } catch (error) {
    handleDownloadError(error);
  }
}
